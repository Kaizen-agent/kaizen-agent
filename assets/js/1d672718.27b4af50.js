"use strict";(self.webpackChunkkaizen_agent_docs=self.webpackChunkkaizen_agent_docs||[]).push([[731],{3808:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"quickstart_llamaindex","title":"LlamaIndex Quickstart Guide","description":"Get started with Kaizen Agent for LlamaIndex applications in minutes","source":"@site/docs/quickstart_llamaindex.md","sourceDirName":".","slug":"/quickstart_llamaindex","permalink":"/kaizen-agent/docs/quickstart_llamaindex","draft":false,"unlisted":false,"editUrl":"https://github.com/Kaizen-agent/kaizen-agent/tree/main/kaizen-agent-docs/docs/quickstart_llamaindex.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docs","previous":{"title":"Quick Start Guide","permalink":"/kaizen-agent/docs/quickstart"},"next":{"title":"Usage Guide","permalink":"/kaizen-agent/docs/usage"}}');var a=t(4848),r=t(8453);const s={sidebar_position:3},l="LlamaIndex Quickstart Guide",o={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Create a Test Directory",id:"create-a-test-directory",level:3},{value:"Set Up Environment Variables",id:"set-up-environment-variables",level:3},{value:"Step 1: Create Your Test Configuration",id:"step-1-create-your-test-configuration",level:2},{value:"Step 2: Prepare Your LlamaIndex Agent",id:"step-2-prepare-your-llamaindex-agent",level:2},{value:"Step 3: Run Kaizen Agent",id:"step-3-run-kaizen-agent",level:2},{value:"Step 4: Review Results",id:"step-4-review-results",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Custom Evaluation Criteria",id:"custom-evaluation-criteria",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"llamaindex-quickstart-guide",children:"LlamaIndex Quickstart Guide"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Get started with Kaizen Agent for LlamaIndex applications in minutes"})}),"\n",(0,a.jsx)(n.p,{children:"This guide will walk you through setting up Kaizen Agent to test and improve your LlamaIndex-based AI applications."}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(n.p,{children:"Before you begin, make sure you have:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Python 3.8+ installed"}),"\n",(0,a.jsx)(n.li,{children:"A LlamaIndex application you want to test"}),"\n",(0,a.jsx)(n.li,{children:"Access to an LLM API (OpenAI, Anthropic, etc.)"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.h3,{id:"create-a-test-directory",children:"Create a Test Directory"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create a test directory for your specific agent\nmkdir my-email-agent-test\ncd my-email-agent-test\n\n# Create a virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n"})}),"\n",(0,a.jsx)(n.p,{children:"Install Kaizen Agent using pip:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install kaizen-agent llama-index llama-index-llms-gemini\n"})}),"\n",(0,a.jsx)(n.h3,{id:"set-up-environment-variables",children:"Set Up Environment Variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Create .env file with your Google API key\ncat > .env << EOF\nGOOGLE_API_KEY=your_api_key_here\nEOF\n\n# Or set it directly in your shell\nexport GOOGLE_API_KEY="your_api_key_here"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-1-create-your-test-configuration",children:"Step 1: Create Your Test Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.code,{children:"test_config.yaml"})," file in your project root:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'name: Email Agent\nagent_type: dynamic_region\nfile_path: email_agent.py\ndescription: |\n  An agent that improves an email draft by making it more professional, clear, and effective.\n\nframework: llamaindex\n\nagent:\n  module: email_agent\n  class: EmailAgent\n  method: improve_email\n\nevaluation:\n  evaluation_targets:\n    - name: improved_email\n      source: return\n      criteria: "The improved_email must be a string that is easy to understand and follow."\n      description: "Evaluates the accuracy of the improved email"\n      weight: 0.5\n    - name: formatted_email\n      source: return\n      criteria: "The improved_email must be a string that is formatted correctly and contains only the improved email no other text."\n      description: "Checks if the improved email is formatted correctly"\n      weight: 0.5\n\nmax_retries: 3\n\nfiles_to_fix:\n  - email_agent.py\n\nsteps:\n  - name: Email Draft improvement\n    input:\n      input: \n        - name: email_draft\n          type: string\n          value: "Hey, can you send me the report?"\n          \n  - name: Edge Case\n    input:\n      input: \n        - name: email_draft\n          type: string\n          value: "test"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-2-prepare-your-llamaindex-agent",children:"Step 2: Prepare Your LlamaIndex Agent"}),"\n",(0,a.jsxs)(n.p,{children:["Create your LlamaIndex agent file (e.g., ",(0,a.jsx)(n.code,{children:"email_agent.py"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from llama_index.core.agent import ReActAgent\nfrom llama_index.llms.gemini import Gemini\nfrom llama_index.core.tools.function_tool import FunctionTool\nfrom typing import Dict, Any\nimport os\nfrom dotenv import load_dotenv\n\n\nclass EmailAgent:\n    """An agent for improving email drafts using AI."""\n    \n    def __init__(self, api_key: str = None):\n        """\n        Initialize the EmailAgent.\n        \n        Args:\n            api_key (str, optional): Google API key. If not provided, will try to load from environment.\n        """\n        # Load environment variables\n        load_dotenv()\n        \n        # Get API key\n        self.api_key = api_key or os.getenv("GOOGLE_API_KEY")\n        if not self.api_key:\n            raise ValueError("Google API key is required. Set GOOGLE_API_KEY environment variable or pass it to the constructor.")\n        \n        # Initialize components\n        self.llm = Gemini(model="models/gemini-2.0-flash-lite", temperature=0.1)\n        self.agent = self._create_agent()\n    \n    def _improve_email_with_llm(self, email_draft: str) -> str:\n        """\n        Improve an email draft using the LLM to make it more professional, clear, and effective.\n        \n        Args:\n            email_draft (str): The original email draft to improve\n            \n        Returns:\n            str: The improved email version\n        """\n        prompt = f"""\n        improve this email: "{email_draft}"\n        """\n        \n        try:\n            response = self.llm.complete(prompt)\n            return response.text.strip()\n        except Exception as e:\n            # Fallback to basic improvements if LLM fails\n            return f"Error using LLM: {e}. Original email: {email_draft}"\n    \n    def _create_agent(self) -> ReActAgent:\n        """Create and return the email improvement agent."""\n        \n        # Create the email improvement tool with LLM\n        def improve_email_wrapper(email_draft: str) -> str:\n            return self._improve_email_with_llm(email_draft)\n        \n        email_tool = FunctionTool.from_defaults(\n            fn=improve_email_wrapper,\n            name="improve_email",\n            description="Improve an email draft by making it more professional, clear, and effective using AI"\n        )\n        \n        # Create the agent\n        agent = ReActAgent.from_tools(\n            tools=[email_tool],\n            llm=self.llm,\n            verbose=True\n        )\n        \n        return agent\n    \n    def improve_email(self, email_draft: str) -> str:\n        """\n        Improve an email draft.\n        \n        Args:\n            email_draft (str): The email draft to improve\n            \n        Returns:\n            str: The improved email version\n        """\n        if not email_draft or not email_draft.strip():\n            raise ValueError("Email draft cannot be empty")\n        \n        try:\n            response = self.agent.chat(\n                f"Please use the improve_email tool to enhance this email draft: \'{email_draft}\'. "\n                "Make it more professional and well-formatted."\n            )\n            return response.response\n        except Exception as e:\n            raise RuntimeError(f"Failed to improve email: {e}")\n\n\ndef main():\n    """Main function to run the interactive email agent."""\n    \n    try:\n        # Create the agent\n        agent = EmailAgent()\n        \n        print("=== Email Improvement Agent ===\\n")\n        print("Type your email draft and I\'ll help improve it!")\n        print("Type \'quit\' to exit the program.\\n")\n        \n        while True:\n            try:\n                # Get user input\n                email_draft = input("Enter your email draft: ").strip()\n                \n                # Check if user wants to quit\n                if email_draft.lower() in [\'quit\', \'exit\', \'q\']:\n                    print("Goodbye!")\n                    break\n                \n                # Check if input is empty\n                if not email_draft:\n                    print("Please enter a valid email draft.\\n")\n                    continue\n                \n                print("\\nImproving your email...")\n                \n                # Get improved version from agent\n                improved_email = agent.improve_email(email_draft)\n                \n                print("\\n" + "="*50)\n                print("IMPROVED EMAIL:")\n                print("="*50)\n                print(improved_email)\n                print("="*50 + "\\n")\n                \n            except KeyboardInterrupt:\n                print("\\n\\nGoodbye!")\n                break\n            except Exception as e:\n                print(f"Error improving email: {e}")\n                print("Please try again.\\n")\n                \n    except ValueError as e:\n        print(f"Configuration error: {e}")\n    except Exception as e:\n        print(f"Unexpected error: {e}")\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-3-run-kaizen-agent",children:"Step 3: Run Kaizen Agent"}),"\n",(0,a.jsx)(n.p,{children:"Execute the test command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kaizen test-all --config test_config.yaml --auto-fix --save-logs\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Add the ",(0,a.jsx)(n.code,{children:"--better-ai"})," flag to enable enhanced AI capabilities for improved code suggestions and fixes."]}),"\n",(0,a.jsx)(n.p,{children:"Kaizen Agent will:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Load your LlamaIndex EmailAgent"}),"\n",(0,a.jsx)(n.li,{children:"Run it against your test cases"}),"\n",(0,a.jsx)(n.li,{children:"Evaluate the responses using AI"}),"\n",(0,a.jsx)(n.li,{children:"Automatically fix issues it finds"}),"\n",(0,a.jsx)(n.li,{children:"Re-test until all cases pass"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"step-4-review-results",children:"Step 4: Review Results"}),"\n",(0,a.jsx)(n.p,{children:"Kaizen Agent provides detailed reports showing:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test Results"}),": Pass/fail status for each test case"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Improvements Made"}),": What changes were automatically applied"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance Metrics"}),": Response quality scores"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Before/After Comparisons"}),": How your agent improved"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"custom-evaluation-criteria",children:"Custom Evaluation Criteria"}),"\n",(0,a.jsx)(n.p,{children:"You can define more sophisticated evaluation criteria for email improvement:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'evaluation:\n  evaluation_targets:\n    - name: professional_tone\n      source: return\n      criteria: "The email should maintain a professional and courteous tone"\n      description: "Evaluates the professionalism of the improved email"\n      weight: 0.3\n    - name: clarity\n      source: return\n      criteria: "The email should be clear, concise, and easy to understand"\n      description: "Checks if the email is clear and well-structured"\n      weight: 0.3\n    - name: grammar_spelling\n      source: return\n      criteria: "The email should be free of grammatical and spelling errors"\n      description: "Ensures proper grammar and spelling"\n      weight: 0.2\n    - name: formatting\n      source: return\n      criteria: "The email should be properly formatted with appropriate structure"\n      description: "Checks email formatting and structure"\n      weight: 0.2\n'})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Issue"}),": Import errors with LlamaIndex"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install llama-index\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Issue"}),": Google API key not found"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Make sure your .env file contains:\nGOOGLE_API_KEY=your_actual_api_key_here\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Explore ",(0,a.jsx)(n.a,{href:"/kaizen-agent/docs/usage",children:"Usage Guide"})," for advanced features"]}),"\n",(0,a.jsxs)(n.li,{children:["Check out ",(0,a.jsx)(n.a,{href:"/kaizen-agent/docs/examples",children:"Examples"})," for more LlamaIndex patterns"]}),"\n",(0,a.jsxs)(n.li,{children:["Join our ",(0,a.jsx)(n.a,{href:"https://discord.gg/2A5Genuh",children:"Discord community"})," for support"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);