"use strict";(self.webpackChunkkaizen_agent_docs=self.webpackChunkkaizen_agent_docs||[]).push([[864],{3973:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"examples","title":"Examples","description":"Explore real-world examples of AI agents and their Kaizen Agent test configurations. These examples demonstrate different use cases, input types, and evaluation strategies.","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/kaizen-agent/docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/Kaizen-agent/kaizen-agent/tree/main/kaizen-agent-docs/docs/examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"GitHub Integration Guide","permalink":"/kaizen-agent/docs/github"},"next":{"title":"Frequently Asked Questions","permalink":"/kaizen-agent/docs/faq"}}');var i=t(4848),a=t(8453);const r={},o="Examples",l={},c=[{value:"Email Improvement Agent",id:"email-improvement-agent",level:2},{value:"Python Version",id:"python-version",level:3},{value:"TypeScript Version (Mastra)",id:"typescript-version-mastra",level:3},{value:"Text Analysis Agent",id:"text-analysis-agent",level:2},{value:"Agent Code",id:"agent-code",level:3},{value:"Test Configuration",id:"test-configuration",level:3},{value:"Code Review Agent",id:"code-review-agent",level:2},{value:"Agent Code",id:"agent-code-1",level:3},{value:"Test Configuration",id:"test-configuration-1",level:3},{value:"Chatbot Agent",id:"chatbot-agent",level:2},{value:"Agent Code",id:"agent-code-2",level:3},{value:"Test Configuration",id:"test-configuration-2",level:3},{value:"Running the Examples",id:"running-the-examples",level:2},{value:"Customizing Examples",id:"customizing-examples",level:2},{value:"Best Practices from Examples",id:"best-practices-from-examples",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"examples",children:"Examples"})}),"\n",(0,i.jsx)(n.p,{children:"Explore real-world examples of AI agents and their Kaizen Agent test configurations. These examples demonstrate different use cases, input types, and evaluation strategies."}),"\n",(0,i.jsx)(n.h2,{id:"email-improvement-agent",children:"Email Improvement Agent"}),"\n",(0,i.jsx)(n.p,{children:"A simple agent that improves email drafts by making them more professional and well-structured."}),"\n",(0,i.jsx)(n.h3,{id:"python-version",children:"Python Version"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Agent Code"})," (",(0,i.jsx)(n.code,{children:"my_agent.py"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import google.generativeai as genai\nimport os\n\nclass EmailAgent:\n    def __init__(self):\n        genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))\n        self.model = genai.GenerativeModel(\'gemini-2.5-flash-preview-05-20\')\n        # Simple prompt that Kaizen can improve significantly\n        self.system_prompt = "Improve this email draft."\n    \n    def improve_email(self, email_draft):\n        full_prompt = f"{self.system_prompt}\\n\\nEmail draft:\\n{email_draft}\\n\\nImproved version:"\n        response = self.model.generate_content(full_prompt)\n        return response.text\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Configuration"})," (",(0,i.jsx)(n.code,{children:"kaizen.yaml"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Email Improvement Agent Test\nfile_path: my_agent.py\ndescription: This agent improves email drafts by making them more professional, clear, and well-structured. It transforms casual or poorly written emails into polished, business-appropriate communications.\nagent:\n  module: my_agent\n  class: EmailAgent\n  method: improve_email\n\nevaluation:\n  evaluation_targets:\n    - name: quality\n      source: return\n      criteria: "The email should be professional, polite, and well-structured with proper salutations and closings"\n      weight: 0.5\n    - name: format\n      source: return\n      criteria: "The response should contain only the improved email content without any explanatory text, markdown formatting, or additional commentary. It should be a clean, standalone email draft ready for use."\n      weight: 0.5\n\nfiles_to_fix:\n  - my_agent.py\n\nsteps:\n  - name: Professional Email Improvement\n    input:\n      input: "hey boss, i need time off next week. thanks"\n  \n  - name: Edge Case - Empty Email\n    input:\n      input: ""\n  \n  - name: Edge Case - Very Informal Email\n    input:\n      input: "yo dude, can\'t make it to the meeting tomorrow. got stuff to do. sorry!"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"typescript-version-mastra",children:"TypeScript Version (Mastra)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Agent Code"})," (",(0,i.jsx)(n.code,{children:"my_agent.ts"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { google } from '@ai-sdk/google';\nimport { Agent } from '@mastra/core/agent';\n\nexport const emailFixAgent = new Agent({\n  name: 'Email Fix Agent',\n  instructions: `You are an email assistant. Improve this email draft.`,\n  model: google('gemini-2.5-flash-preview-05-20'),\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Configuration"})," (",(0,i.jsx)(n.code,{children:"kaizen.yaml"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Email Improvement Agent Test\nfile_path: src/mastra/agents/email-agent.ts\nlanguage: typescript\ndescription: This agent improves email drafts by making them more professional, clear, and well-structured. It transforms casual or poorly written emails into polished, business-appropriate communications.\nagent:\n  module: email-agent  # Just the file name without extension\n\nevaluation:\n  evaluation_targets:\n    - name: quality\n      source: return\n      criteria: "The email should be professional, polite, and well-structured with proper salutations and closings"\n      weight: 0.5\n    - name: format\n      source: return\n      criteria: "The response should contain only the improved email content without any explanatory text, markdown formatting, or additional commentary. It should be a clean, standalone email draft ready for use."\n      weight: 0.5\n\nfiles_to_fix:\n  - src/mastra/agents/email-agent.ts\n\nsettings:\n  timeout: 180\n\nsteps:\n  - name: Professional Email Improvement\n    input:\n      input: "hey boss, i need time off next week. thanks"\n  \n  - name: Edge Case - Very Informal Email\n    input:\n      input: "yo dude, can\'t make it to the meeting tomorrow. got stuff to do. sorry!"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"text-analysis-agent",children:"Text Analysis Agent"}),"\n",(0,i.jsx)(n.p,{children:"A more complex agent that performs sentiment analysis and extracts key information from text."}),"\n",(0,i.jsx)(n.h3,{id:"agent-code",children:"Agent Code"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Agent Code"})," (",(0,i.jsx)(n.code,{children:"agents/text_analyzer.py"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import google.generativeai as genai\nimport os\nimport json\n\nclass TextAnalyzer:\n    def __init__(self):\n        genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))\n        self.model = genai.GenerativeModel(\'gemini-2.5-flash-preview-05-20\')\n        self.system_prompt = """\n        You are a text analysis expert. Analyze the given text and provide:\n        1. A sentiment score between -1.0 (very negative) and 1.0 (very positive)\n        2. Key phrases that capture the main points\n        3. A structured analysis summary\n        \n        Return your response as a JSON object with these fields:\n        - sentiment_score: float\n        - key_phrases: list of strings\n        - analysis_summary: string\n        """\n    \n    def analyze_text(self, text_content):\n        if not text_content.strip():\n            return {\n                "sentiment_score": 0.0,\n                "key_phrases": [],\n                "analysis_summary": "No text provided for analysis."\n            }\n        \n        full_prompt = f"{self.system_prompt}\\n\\nText to analyze:\\n{text_content}\\n\\nAnalysis:"\n        response = self.model.generate_content(full_prompt)\n        \n        try:\n            # Try to parse JSON response\n            result = json.loads(response.text)\n            return result\n        except json.JSONDecodeError:\n            # Fallback to structured text response\n            return {\n                "sentiment_score": 0.0,\n                "key_phrases": [],\n                "analysis_summary": response.text\n            }\n    \n    def analyze_review(self, user_review, analysis_settings=None):\n        """Analyze a structured user review object"""\n        if analysis_settings is None:\n            analysis_settings = {\n                "include_sentiment": True,\n                "extract_keywords": True,\n                "detect_emotions": False\n            }\n        \n        # Combine review text with metadata\n        review_text = f"Review: {user_review.text}\\nRating: {user_review.rating}/5\\nCategory: {user_review.category}"\n        \n        result = self.analyze_text(review_text)\n        result["review_quality"] = "high" if user_review.rating >= 4 else "medium"\n        \n        return result\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"User Review Class"})," (",(0,i.jsx)(n.code,{children:"agents/review_processor.py"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class UserReview:\n    def __init__(self, text, rating, category, helpful_votes=0, verified_purchase=False):\n        self.text = text\n        self.rating = rating\n        self.category = category\n        self.helpful_votes = helpful_votes\n        self.verified_purchase = verified_purchase\n"})}),"\n",(0,i.jsx)(n.h3,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Configuration"})," (",(0,i.jsx)(n.code,{children:"kaizen.yaml"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Text Analysis Agent Test Suite\nagent_type: dynamic_region\nfile_path: agents/text_analyzer.py\ndescription: |\n  Test suite for the TextAnalyzer agent that processes and analyzes text content.\n  \n  This agent performs sentiment analysis, extracts key information, and provides\n  structured analysis results. Tests cover various input types, edge cases, and\n  expected output formats to ensure reliable performance.\n\nagent:\n  module: agents.text_analyzer\n  class: TextAnalyzer\n  method: analyze_text\n\nevaluation:\n  evaluation_targets:\n    - name: sentiment_score\n      source: variable\n      criteria: "The sentiment_score must be a float between -1.0 and 1.0. Negative values indicate negative sentiment, positive values indicate positive sentiment. The score should accurately reflect the emotional tone of the input text."\n      description: "Evaluates the accuracy of sentiment analysis output"\n      weight: 0.4\n    - name: key_phrases\n      source: variable\n      criteria: "The key_phrases should be a list of strings containing the most important phrases from the input text"\n      description: "Checks if key phrase extraction is working correctly"\n      weight: 0.3\n    - name: analysis_quality\n      source: return\n      criteria: "The response should be well-structured, professional, and contain actionable insights"\n      description: "Evaluates the overall quality and usefulness of the analysis"\n      weight: 0.3\n\nmax_retries: 3\n\nfiles_to_fix:\n  - agents/text_analyzer.py\n  - agents/prompts.py\n\nreferenced_files:\n  - agents/prompts.py\n  - utils/text_utils.py\n\nsteps:\n  - name: Positive Review Analysis\n    description: "Analyze a positive customer review"\n    input:\n      file_path: agents/text_analyzer.py\n      method: analyze_text\n      input: \n        - name: text_content\n          type: string\n          value: "This product exceeded my expectations! The quality is outstanding and the customer service was excellent. I would definitely recommend it to others."\n          \n      expected_output: \n        sentiment_score: 0.8\n        key_phrases: ["exceeded expectations", "outstanding quality", "excellent customer service"]\n\n  - name: Negative Feedback Analysis\n    description: "Analyze negative customer feedback"\n    input:\n      file_path: agents/text_analyzer.py\n      method: analyze_text\n      input: \n        - name: text_content\n          type: string\n          value: "I\'m very disappointed with this purchase. The product arrived damaged and the support team was unhelpful."\n          \n      expected_output: \n        sentiment_score: -0.7\n        key_phrases: ["disappointed", "damaged product", "unhelpful support"]\n\n  - name: Neutral Text Analysis\n    description: "Analyze neutral or mixed sentiment text"\n    input:\n      file_path: agents/text_analyzer.py\n      method: analyze_text\n      input: \n        - name: text_content\n          type: string\n          value: "The product has both good and bad aspects. The design is nice but the price is high."\n          \n      expected_output: \n        sentiment_score: 0.0\n        key_phrases: ["good aspects", "bad aspects", "nice design", "high price"]\n\n  - name: Object Input Analysis\n    description: "Analyze text using a structured user review object"\n    input:\n      file_path: agents/text_analyzer.py\n      method: analyze_review\n      input: \n        - name: user_review\n          type: object\n          class_path: agents.review_processor.UserReview\n          args: \n            text: "This product exceeded my expectations! The quality is outstanding."\n            rating: 5\n            category: "electronics"\n            helpful_votes: 12\n            verified_purchase: true\n        - name: analysis_settings\n          type: dict\n          value:\n            include_sentiment: true\n            extract_keywords: true\n            detect_emotions: false\n          \n      expected_output: \n        sentiment_score: 0.9\n        key_phrases: ["exceeded expectations", "outstanding quality", "excellent customer service"]\n        review_quality: "high"\n\n  - name: Empty Input Handling\n    description: "Test how the agent handles empty or minimal input"\n    input:\n      file_path: agents/text_analyzer.py\n      method: analyze_text\n      input: \n        - name: text_content\n          type: string\n          value: ""\n          \n      expected_output: \n        sentiment_score: 0.0\n        key_phrases: []\n'})}),"\n",(0,i.jsx)(n.h2,{id:"code-review-agent",children:"Code Review Agent"}),"\n",(0,i.jsx)(n.p,{children:"An agent that reviews code and provides feedback on quality, security, and best practices."}),"\n",(0,i.jsx)(n.h3,{id:"agent-code-1",children:"Agent Code"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Agent Code"})," (",(0,i.jsx)(n.code,{children:"agents/code_reviewer.py"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import google.generativeai as genai\nimport os\n\nclass CodeReviewer:\n    def __init__(self):\n        genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))\n        self.model = genai.GenerativeModel(\'gemini-2.5-flash-preview-05-20\')\n        self.system_prompt = """\n        You are a senior software engineer conducting code reviews. Analyze the provided code and provide:\n        1. Code quality assessment (1-10 scale)\n        2. Security concerns (if any)\n        3. Performance considerations\n        4. Specific improvement suggestions\n        \n        Be constructive and provide actionable feedback.\n        """\n    \n    def review_code(self, code_content, language="python"):\n        full_prompt = f"{self.system_prompt}\\n\\nLanguage: {language}\\n\\nCode to review:\\n```{language}\\n{code_content}\\n```\\n\\nReview:"\n        response = self.model.generate_content(full_prompt)\n        return response.text\n    \n    def review_function(self, function_code, context=None):\n        """Review a specific function with optional context"""\n        context_info = f"\\nContext: {context}" if context else ""\n        full_prompt = f"{self.system_prompt}\\n\\nFunction to review:{context_info}\\n\\n```python\\n{function_code}\\n```\\n\\nReview:"\n        response = self.model.generate_content(full_prompt)\n        return response.text\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test-configuration-1",children:"Test Configuration"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Configuration"})," (",(0,i.jsx)(n.code,{children:"kaizen.yaml"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Code Review Agent Test Suite\nfile_path: agents/code_reviewer.py\ndescription: |\n  Test suite for the CodeReviewer agent that analyzes code quality, security, and best practices.\n  \n  This agent provides comprehensive code reviews with actionable feedback for\n  improving code quality, identifying security issues, and suggesting optimizations.\n\nagent:\n  module: agents.code_reviewer\n  class: CodeReviewer\n  method: review_code\n\nevaluation:\n  evaluation_targets:\n    - name: review_quality\n      source: return\n      criteria: "The review should be comprehensive, constructive, and provide specific, actionable feedback. It should identify potential issues and suggest concrete improvements."\n      weight: 0.4\n    - name: technical_depth\n      source: return\n      criteria: "The review should demonstrate technical expertise and cover code quality, security, performance, and best practices relevant to the programming language."\n      weight: 0.3\n    - name: clarity\n      source: return\n      criteria: "The feedback should be clear, well-structured, and easy to understand. It should avoid overly technical jargon when possible and provide explanations for suggestions."\n      weight: 0.3\n\nfiles_to_fix:\n  - agents/code_reviewer.py\n\nsteps:\n  - name: Python Function Review\n    description: "Review a Python function for quality and best practices"\n    input:\n      file_path: agents/code_reviewer.py\n      method: review_code\n      input: \n        - name: code_content\n          type: string\n          value: |\n            def calculate_total(items):\n                total = 0\n                for item in items:\n                    total += item.price\n                return total\n        - name: language\n          type: string\n          value: "python"\n\n  - name: Security Vulnerability Review\n    description: "Review code for potential security vulnerabilities"\n    input:\n      file_path: agents/code_reviewer.py\n      method: review_code\n      input: \n        - name: code_content\n          type: string\n          value: |\n            def process_user_input(user_data):\n                query = "SELECT * FROM users WHERE id = " + user_data\n                return execute_query(query)\n        - name: language\n          type: string\n          value: "python"\n\n  - name: Performance Review\n    description: "Review code for performance optimizations"\n    input:\n      file_path: agents/code_reviewer.py\n      method: review_code\n      input: \n        - name: code_content\n          type: string\n          value: |\n            def find_duplicates(items):\n                duplicates = []\n                for i in range(len(items)):\n                    for j in range(i + 1, len(items)):\n                        if items[i] == items[j]:\n                            duplicates.append(items[i])\n                return duplicates\n        - name: language\n          type: string\n          value: "python"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"chatbot-agent",children:"Chatbot Agent"}),"\n",(0,i.jsx)(n.p,{children:"A conversational agent that handles customer support queries."}),"\n",(0,i.jsx)(n.h3,{id:"agent-code-2",children:"Agent Code"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Agent Code"})," (",(0,i.jsx)(n.code,{children:"agents/customer_support.py"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import google.generativeai as genai\nimport os\nimport json\n\nclass CustomerSupportBot:\n    def __init__(self):\n        genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))\n        self.model = genai.GenerativeModel(\'gemini-2.5-flash-preview-05-20\')\n        self.system_prompt = """\n        You are a helpful customer support representative for TechCorp. \n        You help customers with product questions, troubleshooting, and general inquiries.\n        \n        Guidelines:\n        - Be polite, professional, and helpful\n        - Provide accurate information about our products\n        - Escalate complex issues appropriately\n        - Keep responses concise but informative\n        - Always ask if there\'s anything else you can help with\n        """\n        self.conversation_history = []\n    \n    def respond(self, user_message, context=None):\n        # Build conversation context\n        conversation_context = ""\n        if self.conversation_history:\n            conversation_context = "\\n\\nPrevious conversation:\\n"\n            for msg in self.conversation_history[-3:]:  # Last 3 messages\n                conversation_context += f"{msg[\'role\']}: {msg[\'content\']}\\n"\n        \n        full_prompt = f"{self.system_prompt}{conversation_context}\\n\\nCustomer: {user_message}\\n\\nSupport Agent:"\n        response = self.model.generate_content(full_prompt)\n        \n        # Update conversation history\n        self.conversation_history.append({"role": "customer", "content": user_message})\n        self.conversation_history.append({"role": "agent", "content": response.text})\n        \n        return response.text\n    \n    def reset_conversation(self):\n        """Reset the conversation history"""\n        self.conversation_history = []\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test-configuration-2",children:"Test Configuration"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Configuration"})," (",(0,i.jsx)(n.code,{children:"kaizen.yaml"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Customer Support Bot Test Suite\nfile_path: agents/customer_support.py\ndescription: |\n  Test suite for the CustomerSupportBot that handles customer inquiries and support requests.\n  \n  This agent provides helpful, professional responses to customer questions about\n  products, troubleshooting, and general support issues.\n\nagent:\n  module: agents.customer_support\n  class: CustomerSupportBot\n  method: respond\n\nevaluation:\n  evaluation_targets:\n    - name: helpfulness\n      source: return\n      criteria: "The response should be helpful and directly address the customer\'s question or concern. It should provide relevant information or guidance."\n      weight: 0.4\n    - name: professionalism\n      source: return\n      criteria: "The response should be polite, professional, and maintain a helpful tone. It should reflect good customer service practices."\n      weight: 0.3\n    - name: accuracy\n      source: return\n      criteria: "The information provided should be accurate and appropriate for a customer support context. It should not contain false or misleading information."\n      weight: 0.3\n\nfiles_to_fix:\n  - agents/customer_support.py\n\nsteps:\n  - name: Product Inquiry\n    description: "Handle a customer asking about product features"\n    input:\n      file_path: agents/customer_support.py\n      method: respond\n      input: \n        - name: user_message\n          type: string\n          value: "What are the main features of your premium plan?"\n\n  - name: Technical Support\n    description: "Handle a technical troubleshooting request"\n    input:\n      file_path: agents/customer_support.py\n      method: respond\n      input: \n        - name: user_message\n          type: string\n          value: "I can\'t log into my account. It says \'invalid credentials\' but I\'m sure my password is correct."\n\n  - name: Billing Question\n    description: "Handle a billing-related inquiry"\n    input:\n      file_path: agents/customer_support.py\n      method: respond\n      input: \n        - name: user_message\n          type: string\n          value: "I was charged twice this month. Can you help me get a refund?"\n\n  - name: Conversation Continuity\n    description: "Test conversation history and context"\n    input:\n      file_path: agents/customer_support.py\n      method: respond\n      input: \n        - name: user_message\n          type: string\n          value: "Thanks for the help. How do I contact you if I have more questions?"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"running-the-examples",children:"Running the Examples"}),"\n",(0,i.jsx)(n.p,{children:"To run any of these examples:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create the agent file"})," with the provided code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create the YAML configuration"})," file"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Set up your environment"})," with the required API keys"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Run the tests"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run with auto-fix\nkaizen test-all --config kaizen.yaml --auto-fix --save-logs\n\n# Run with PR creation (if GitHub is set up)\nkaizen test-all --config kaizen.yaml --auto-fix --create-pr --repo your-username/your-repo-name\n"})}),"\n",(0,i.jsx)(n.h2,{id:"customizing-examples",children:"Customizing Examples"}),"\n",(0,i.jsx)(n.p,{children:"You can customize these examples by:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modifying the prompts"})," to match your specific use case"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Adjusting evaluation criteria"})," to focus on your priorities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Adding more test cases"})," to cover additional scenarios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Changing input types"})," to match your agent's expected inputs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Updating file paths"})," to match your project structure"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-from-examples",children:"Best Practices from Examples"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear Evaluation Criteria"}),": Each example shows specific, measurable evaluation criteria"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge Case Testing"}),": Examples include tests for empty inputs, error conditions, and unusual scenarios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Descriptive Test Names"}),": Test names clearly indicate what's being tested"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Balanced Test Coverage"}),": Mix of happy path and edge case tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Realistic Inputs"}),": Test inputs reflect real-world usage scenarios"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For more examples and community contributions, check out our ",(0,i.jsx)(n.a,{href:"https://github.com/Kaizen-agent/kaizen-agent",children:"GitHub repository"})," or join our ",(0,i.jsx)(n.a,{href:"https://discord.gg/2A5Genuh",children:"Discord community"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);